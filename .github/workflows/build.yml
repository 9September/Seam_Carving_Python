# .github/workflows/build.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # 태그가 v1.0.0 등일 때 트리거
  release:
    types: [created]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PyQt5 opencv-python numpy

    - name: Build Executable
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          pyinstaller --onefile --windowed --icon=resources/app_icon.ico main.py
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          pyinstaller --onefile --windowed --icon=resources/app_icon.icns main.py
        elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          pyinstaller --onefile --windowed main.py
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: executable-${{ matrix.os }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: executable-macos-latest
        path: macos-build/
    - uses: actions/download-artifact@v3
      with:
        name: executable-windows-latest
        path: windows-build/
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload macOS Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/dist/main
        asset_name: main-macos.zip
        asset_content_type: application/zip

    - name: Upload Windows Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/dist/main.exe
        asset_name: main-windows.zip
        asset_content_type: application/zip
